# [PackageDev] target_format: plist, ext: tmLanguage
---
name: ink
scopeName: source.ink
fileTypes: [ink, ink2]
uuid: a29ac98e-945f-4e6e-87b7-ad099d460683

# This is a non standard extension which makes the grammar more readable.
# The variables declared here will be interpolated in regular expressions,
# (e. g. \s*{{variableName}}\s*)
variables:
  # # Identifier can't start with a number…
  indentifierBeginCharacter: '[a-zA-Z_\x{0100}-\x{017F}\x{0180}-\x{024F}\x{0600}-\x{06FF}\x{0530}-\x{058F}\x{0400}-\x{04FF}\x{0370}-\x{03FF}\x{0590}-\x{05FF}]'
  # Identifier characters can anything within these unicode blocks
  indentifierCharacter: '[a-zA-Z0-9_\x{0100}-\x{017F}\x{0180}-\x{024F}\x{0600}-\x{06FF}\x{0530}-\x{058F}\x{0400}-\x{04FF}\x{0370}-\x{03FF}\x{0590}-\x{05FF}]'

  anyNonIdentifierCharacter: '[^a-zA-Z_\x{0100}-\x{017F}\x{0180}-\x{024F}\x{0600}-\x{06FF}\x{0530}-\x{058F}\x{0400}-\x{04FF}\x{0370}-\x{03FF}\x{0590}-\x{05FF}]'
  validIdentifier: '{{indentifierCharacter}}*{{indentifierBeginCharacter}}{{indentifierCharacter}}*'

  standardFunctions: 'LIST_COUNT|LIST_MIN|LIST_MAX|LIST_ALL|LIST_INVERT|LIST_RANDOM|CHOICE_COUNT|TURNS_SINCE|LIST_RANGE|TURNS|POW|FLOOR|CEILING|INT|FLOAT'
  whitespace: '[^\S\n\r]'

# Before we dive into the meat, a bit of syntax to remember:
#
# (?<=): Positive lookbehind, non capturing unless it's within a group
# (?<!): Negative lookbehind, non capturing unless it's within a group
# (?=): Positive lookahead, non capturing unless it's within a group
# (?!): Negative lookahead, non capturing unless it's within a group
# (?:): Non capturing group
# (?x): Ignore subsequent spaces (useful for multiline-formatted regex)
#
# >-: YAML multi-line string, turning line breaks into spaces
patterns:
- include: '#comment'
- include: '#tag'
- include: '#todo'
- include: '#import'
- include: '#declaration'
- include: '#knot'
- include: '#stitch'
- include: '#choice'
- include: '#divert'
- include: '#gather'
- include: '#logic'
- include: '#glue'
- include: '#interpolevaluablock'

repository:

# ##############################################################################
# Comments
# ##############################################################################

  comment: # Inline (//) and block (/* */) comments. Comments can happen anywhere.
    patterns:
    - name: comment.block.ink
      begin: (/\*)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ink' }
      end: (\*/)
      endCaptures:
        '1': { name: 'punctuation.definition.comment.ink' }
    - name: comment.line.ink
      begin: (\/\/)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ink' }
      end: (?=$)

# ##############################################################################
# Tag
# ##############################################################################

  tag:
    patterns: # # tag content • Cannot exist within a comment.
    - name: string.quoted.other.ink entity.tag.ink
      begin: (?<!\\)(\#)
      beginCaptures:
        '1': { name: 'punctuation.definition.comment.ink comment.line.ink entity.tag.begin.ink' }
      end: (?=$|\#)
      patterns:
        - include: '#comment'
        - include: '#tag'

# ##############################################################################
# Tag
# ##############################################################################

  todo:
    patterns: # # tag content • Cannot exist within a comment.
    - name: comment.line.ink entity.todo.ink
      begin: (?<=^|\-)(?:{{whitespace}})*(TODO)
      beginCaptures:
        '1': { name: 'constant.other entity.todo.begin.ink' }
      end: (?=$)
      patterns:
        - include: '#comment'

# ##############################################################################
# Includes
# ##############################################################################

  import: # INCLUDE a/b/c.ink
    patterns:
    - match: (?:^)(?:{{whitespace}})*(INCLUDE)(?:(?:{{whitespace}})*)(.*)$
      captures:
        '1': { name: keyword.control.import.ink }
        '2': { name: string.quoted.other.ink }

# ##############################################################################
# Variable declaration / Assignment
# ##############################################################################

  declaration: # VAR foo = "bar"
    patterns:
    - begin: (?:^)(?:{{whitespace}})*((VAR)|(LIST))(?:{{whitespace}})*
      beginCaptures:
        '1': { name: storage.type.ink }
        '2': { name: storage.type.var.ink }
        '3': { name: storage.type.list.ink }
      end: (?=$)
      patterns:
        - include: '#assignment'
        - include: '#comment'
    - begin: (?:^)(?:{{whitespace}})*(CONST)(?:{{whitespace}})*
      beginCaptures:
        '1': { name: storage.type.const.ink }
      end: (?=$)
      patterns:
        - include: '#constAssignment'
        - include: '#comment'
    - begin: (?:^)(?:{{whitespace}})*(EXTERNAL)(?:{{whitespace}})*
      beginCaptures:
        '1': { name: storage.type.external.ink }
      end: (?=$)
      patterns:
        - include: '#externalFunctionDeclaration'
        - include: '#comment'

  externalFunctionDeclaration:
    patterns: # function foo(a, b)
      - begin: ({{validIdentifier}})(?:{{whitespace}})*
        beginCaptures:
          '1': { name: entity.name.function.ink }
        end: (?<=\)) # Ending right before the closing parenthesis.
        patterns:
          - include: '#functionDeclarationParameters'

  assignment: # foo = "bar"
    patterns:
    - begin: ({{validIdentifier}})(?:{{whitespace}})*(=)
      beginCaptures:
        '1': { name: entity.name.variable.other.ink }
        '2': { name: keyword.operator.assignment.ink }
      end: (?=$)
      patterns:
        - include: '#comment'
        - include: '#languageLiteral'
        - include: '#numberLiteral'
        - include: '#stringLiteral'
        - include: '#divert'
        - include: '#expressionIdentifier'
        - include: '#expression'

  constAssignment: # foo = "bar"
    patterns:
    - begin: ({{validIdentifier}})(?:{{whitespace}})*(=)
      beginCaptures:
        '1': { name: variable.other.constant.ink entity.name.variable.other.constant.ink }
        '2': { name: keyword.operator.assignment.ink }
      end: (?=$)
      patterns:
        - include: '#comment'
        - include: '#languageLiteral'
        - include: '#numberLiteral'
        - include: '#stringLiteral'
        - include: '#divert'
        - include: '#expressionIdentifier'
        - include: '#expression'

  tempDeclaration:
    patterns:
    - begin: >-
        (?x)
         (?:(?<=^)|(?<=\~))
         (?:{{whitespace}})*
         (temp)
         (?:{{whitespace}})*
         ({{validIdentifier}})
         (?:{{whitespace}})*
         (=)
      beginCaptures:
        '1': { name: storage.modifier.ink }
        '2': { name: entity.name.variable.other.ink }
        '3': { name: keyword.assignment.ink }
      end: (?=$)
      patterns:
        - include: '#comment'
        - include: '#function'
        - include: '#divert'
        - include: '#languageLiteral'
        - include: '#stringLiteral'
        - include: '#expressionIdentifier'
        - include: '#expression'
        - include: '#numberLiteral'

# ##############################################################################
# Language literals
# ##############################################################################

  languageLiteral:
    patterns:
    - match: (?:{{whitespace}})*(false|true)(?:{{whitespace}})*
      captures:
        '1': { name: constant.language.boolean.ink constant.language.ink  }

  numberLiteral:
    patterns:
    - match: (?:{{whitespace}})*([0-9]+(\.[0-9]+)?)(?:{{whitespace}})*
      captures:
        '1': { name: constant.numeric.ink }

  stringLiteral:
    patterns: # "string"
    - begin: (?:{{whitespace}}*)(\")
      beginCaptures:
        '1': { name: punctuation.definition.string.begin.ink }
      end: (\")(?:{{whitespace}}*)
      endCaptures:
        '1': { name: punctuation.definition.string.end.ink }
      patterns:
        - name: constant.character.escape.ink
          match: '\\.'
        - name: string.quoted.double.ink
          match: '[^\n\r\"]+'
# ##############################################################################
# Label
# ##############################################################################

  label:
    patterns: # (label)
      - name: string.label.ink entity.name.label.ink string.quoted.other.ink
        match: '(\()(?:{{whitespace}})*{{validIdentifier}}(?:{{whitespace}})*(\))'
        captures:
          '1': { name: punctuation.definition.string.label.begin.ink punctuation.definition.string.begin.ink }
          '2': { name: punctuation.definition.string.label.begin.ink punctuation.definition.string.begin.ink }

# ##############################################################################
# Glue
# ##############################################################################

  glue:
    patterns: # <>
      - name: keyword.glue.ink keyword.other.ink
        match: '<>'

# ##############################################################################
# Choice
# ##############################################################################

  choice:
    patterns: # * (foo) {bar} content [content] content
    - begin: >-
        (?x)
         (?<=^|\-)
         (?:{{whitespace}})*
         (?:
           ((?:(?:{{whitespace}})*[\*])+)
           |
           ((?:(?:{{whitespace}})*[\+])+)
         )
      beginCaptures:
        '1': { name: keyword.choice.ink}
        '2': { name: keyword.choice.sticky.ink}
      end: (?=\#|$)
      patterns:
        - include: "#comment"
        - include: "#label"
        - include: '#inlineConditionalSubstitution'
        - include: "#textSuppression"
        - include: "#divert"
        - include: '#tag'
        - include: "#glue"
        - include: "#logic"

  choiceInClause:
    patterns: # * (foo) {bar} content [content] content
    - begin: >-
        (?x)
         (?<=^|\-|\:)
         (?:{{whitespace}})*
         (?:
           ((?:(?:{{whitespace}})*[\*])+)
           |
           ((?:(?:{{whitespace}})*[\+])+)
         )
      beginCaptures:
        '2': { name: keyword.choice.ink }
        '3': { name: keyword.choice.sticky.ink }
      end: (?=\#|$)
      patterns:
        - include: "#comment"
        - include: "#label"
        - include: '#inlineConditionalSubstitution'
        - include: "#textSuppression"
        - include: "#divert"
        - include: '#tag'
        - include: "#glue"
        - include: "#logic"

  textSuppression:
    patterns: # [content]
    - begin: (?<!\\)(\[)
      beginCaptures:
        '1': { name: keyword.choice.suppression.ink keyword.control.ink }
      end: (?<!\\)(\])
      endCaptures:
        '1': { name: keyword.choice.suppression.ink keyword.control.ink }
      patterns:
        - include: "#interpolevaluablock"

# ##############################################################################
# Logic
# ##############################################################################

  logic:
    patterns: # ~ foo = 1 + 2
    - begin: (?:(?<=^)|(?<=\-)|(?<=\:))(?:{{whitespace}})*(~)
      beginCaptures:
        '1': { name: keyword.logic.ink }
      end: (?=$)
      patterns:
        - include: '#returnStatement'
        - include: '#tempDeclaration'
        - include: '#expression'

  returnStatement:
    patterns: # return
      - begin: (?:{{whitespace}})*(return)(?=\s) # Need to match end of line as well -> \s
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=$)
        patterns:
          - include: '#function'
          - include: '#divert'
          - include: '#languageLiteral'
          - include: '#stringLiteral'
          - include: '#expressionIdentifier'
          - include: '#expression'
          - include: '#numberLiteral'

# ##############################################################################
# Gather
# ##############################################################################

  gather:
    patterns: # -
    - begin: (?<=^)(?:{{whitespace}})*((?:(?:{{whitespace}})*\-(?!>))+)
      beginCaptures:
        '1': { name: keyword.gather.ink }
      end: (?=$)
      patterns:
        - include: "#comment"
        - include: '#choice'
        - include: "#label"
        - include: "#divert"
        - include: '#todo'
        - include: "#glue"
        - include: "#logic"
        - include: '#tag'
        - include: "#interpolevaluablock"

# ##############################################################################
# Knot, stitches and functions
# ##############################################################################

  knot:
    patterns: # === knot === • === knot(a, b) === • === function knot(a, b) ===
    - begin: ^(?:{{whitespace}})*(={2,})
      beginCaptures:
        '1': { name: storage.knot.ink storage.type.ink }
      end: (={2,})|(?=$)
      endCaptures:
        '1': { name: storage.knot.ink storage.type.ink }
      patterns:
        - include: "#comment"
        - include: "#functionDeclaration"
        - include: "#knotStitchDeclaration"

  stitch:
    patterns: # = stitch • = stitch(a, b)
    - begin: ^(?:{{whitespace}})*(=)
      beginCaptures:
        '1': { name: storage.knot.ink storage.type.ink }
      end: (?=^)
      patterns:
        - include: "#comment"
        - include: "#knotStitchDeclaration"

  knotStitchDeclaration:
    patterns: # foo • foo(a, b)
      - begin: (?:{{whitespace}})*({{validIdentifier}})(?:{{whitespace}})*
        beginCaptures:
          '1': { name: entity.name.function.ink }
        end: (?<=\))|(?=$|\=|\/\/)
        patterns:
          - include: "#comment"
          - include: '#functionDeclarationParameters'

  functionDeclaration:
    patterns: # function foo(a, b)
      - begin: >-
          (?x)(?:{{whitespace}})*(function)(?:{{whitespace}})*({{validIdentifier}})(?:{{whitespace}})*
        beginCaptures:
          '1': { name: storage.type.ink }
          '2': { name: entity.name.function.ink }
        end: (?<=\))|(?=$)|(?=\=) # Ending right before the closing parenthesis.
        patterns:
          - include: "#comment"
          - include: '#functionDeclarationParameters'

  functionDeclarationParameters:
    patterns: # (a, b)
      - begin: (\()
        beginCaptures:
          '1': { name: punctuation.section.parens.begin.ink }
        end: (\))
        endCaptures:
          '1': { name: punctuation.section.parens.end.ink }
        patterns:
          - include: '#comment'
          - name: storage.modifier.ref.ink
            match: 'ref'
          - name: variable.parameter.function.ink
            match: '[a-zA-Z0-9_]+'
          - name: punctuation.separator.ink
            match: ','
          - include: '#divert'

  function:
    patterns: # foo(a, b)
      - begin: (?:{{whitespace}})*(({{standardFunctions}})|({{validIdentifier}}))(?:{{whitespace}})*(\()(?:{{whitespace}})*
        beginCaptures:
          '2': { name: constant.language.ink }
          '3': { name: variable.function.ink }
          '4': { name: punctuation.section.parens.begin.ink }
        end: (\))
        endCaptures:
          '1': { name: punctuation.section.parens.end.ink }
        patterns:
          - include: '#comment'
          - name: punctuation.separator.ink
            match: ','
          - include: '#divert'
          - include: '#expression'

# ##############################################################################
# Diverts & Threads
# ##############################################################################

  divert:
    patterns: # -> divert • <- content
    - begin: (?:{{whitespace}})*(->|<-)(?:{{whitespace}})*
      beginCaptures:
        '1': { name: keyword.divert.ink keyword.other.ink }
      end: (?=($|\}|\)|\||\-|\#))
      patterns:
        - include: '#comment'
        - include: '#function'
        - include: '#divertIdentifier'
        - include: '#tunnel'

  divertIdentifier:
    patterns: # END • knot
    - begin: >-
        (?x)
        (?:{{whitespace}})*
        (?:
          (END|DONE)
          |
          (?:
            ({{validIdentifier}})
            (?:
              (\.)
              ({{validIdentifier}})
              (?:
                (\.)
                ({{validIdentifier}})
              )?
            )?
          )
        )
      beginCaptures:
        '1': { name: support.constant.ink constant.language.divert constant.language.ink }
        '2': { name: variable.other.knot.ink entity.name.variable.other.knot.ink }
        '3': { name: punctuation.accessor.ink }
        '4': { name: variable.other.stitch.ink entity.name.variable.other.stitch.ink }
        '5': { name: punctuation.accessor.ink }
        '6': { name: variable.other.label.ink entity.name.variable.other.label.ink }
      end: (?=($|\}|\)|\||\#))
      patterns:
        - include: "#comment"
        - include: '#tunnel'

  tunnel:
    patterns: # -> divert • <- content
    - begin: (?:{{whitespace}})*(->(?:->)?|<-)(?:{{whitespace}})*
      beginCaptures:
        '1': { name: keyword.divert.ink keyword.other.ink }
      end: (?=($|\}|\)|\|))
      patterns:
        - include: "#comment"
        - include: '#function'
        - include: '#divertIdentifier'

# ##############################################################################
# interpolevaluablock (anything within {})
# ##############################################################################

  interpolevaluablock:
    patterns:
      - begin: (?<!\\)(\{)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?<!\\)(\})
        endCaptures:
          '1': { name: keyword.control.ink }
        patterns:
          - include: '#multilineAlternative'
          - include: '#multilineBlock'
          - include: '#conditionalSubstitution'
          - include: '#divert'
          - include: '#substitution'
          - include: '#firstAlternativeItem'
          - include: '#alternativeItem'
          - include: '#interpolevaluablock'

  # TODO: Refactor the following rules since they are only used in choices.
  inlineConditionalSubstitution:
    patterns:
      - begin: (?<!\\)(\{)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?<!\\)(\})
        endCaptures:
          '1': { name: keyword.control.ink }
        patterns:
          - include: '#conditionalSubstitution'
          - include: '#substitution'
          - include: '#firstAlternativeItem'
          - include: '#alternativeItem'
          - include: '#interpolevaluablock'
          - include: '#inlineCondition'

  inlineCondition:
    patterns:
      - name: keyword.control.ink
        match: ([^\{\}]*)
        captures:
          '1': { name: keyword.control.ink }

  substitution:
    patterns:
    - match: (?<=\{)([^\{\}\:\|]+)(?=\})
      captures:
        '1': { name: keyword.control.ink }

  firstAlternativeItem:
      patterns:
      - begin: (?<=\{)(?:{{whitespace}})*(&|!|~)
        beginCaptures:
          '1': { name: keyword.control.ink keyword.alternative.type.ink }
        end: (?=\|)
        patterns:
          - include: '#languageLiteral'
          - include: '#numberLiteral'
          - include: '#stringLiteral'
          - include: '#divert'
          - include: '#tag'
          - include: '#comment'
          - include: '#conditionalSubstitution'
          - include: '#interpolevaluablock'

  alternativeItem:
    patterns:
      - begin: (?<!\\)(\|)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=\})|(?=\|)
        patterns:
          - include: '#languageLiteral'
          - include: '#numberLiteral'
          - include: '#stringLiteral'
          - include: '#comment'
          - include: '#interpolevaluablock'
          - include: '#divert'
          - include: '#tag'

  conditionalSubstitution:
    patterns:
      - begin: ((?:[^\{\}\|]|\|(?=\|))+(?:{{whitespace}})*\:)(?:{{whitespace}})*(?!$)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=\})
        patterns:
          - include: "#comment"
          - include: '#divert'
          - include: "#glue"
          - include: '#inlineElseClause'
          - include: '#interpolevaluablock'

  inlineElseClause:
    patterns:
      - begin: (?<!\\)(\|)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=\})
        patterns:
          - include: "#comment"
          - include: '#divert'
          - include: '#interpolevaluablock'

  multilineBlock:
    patterns:
      - begin: ([^\{\}]+(?:{{whitespace}})*\:)(?:{{whitespace}})*(?=$|\/\/)
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=\})
        patterns:
          - include: "#comment"
          - include: '#caseClause'
          - include: '#alternativeClause'
          - include: '#divert'
          - include: '#logic'
          - include: '#choice'
          - include: '#glue'
          - include: '#todo'
          - include: '#interpolevaluablock'
          - include: '#comment'

  multilineAlternative:
    patterns:
      - begin: (?<=\{)(?:{{whitespace}})*$
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=\})
        patterns:
          - include: "#comment"
          - include: '#caseClause'
          - include: '#alternativeClause'
          - include: '#divert'
          - include: '#logic'
          - include: '#choice'
          - include: '#glue'
          - include: '#todo'
          - include: '#interpolevaluablock'
          - include: '#comment'

  caseClause:
    patterns:
      - begin: ^(?:{{whitespace}})*(-(?!>))(?:{{whitespace}})?(else|[^\|\{\}\:]+)(?:{{whitespace}})*(?<!\\)(\:)
        beginCaptures:
          '1': { name: keyword.control.ink }
          '2': { name: keyword.control.ink }
          '3': { name: keyword.control.ink }
        end: (?=^)|(?=\})|(?=\-)
        patterns:
          - include: '#interpolevaluablock'
          - include: '#divert'
          - include: '#logic'
          - include: '#glue'
          - include: '#choiceInClause'
          - include: '#tag'
          - include: '#comment'

  alternativeClause:
    patterns:
      - begin: ^(?:{{whitespace}})*(-(?!>))
        beginCaptures:
          '1': { name: keyword.control.ink }
        end: (?=^)|(?=\})|(?=\-)
        patterns:
          - include: "#comment"
          - include: '#interpolevaluablock'
          - include: '#divert'
          - include: '#logic'
          - include: '#choice'
          - include: '#comment'

# ##############################################################################
# Expressions
# ##############################################################################

  expression:
    patterns:
      - include: '#comment'
      - include: '#parentheses'
      - include: '#function'
      - include: '#operator'
      - include: '#languageLiteral'
      - include: '#stringLiteral'
      - include: '#expressionIdentifier'
      - include: '#numberLiteral'
      - include: '#commas'

  parentheses:
    patterns:
      - name: punctuation.section.parens.begin.ink
        match: \(
      - name: punctuation.section.parens.end.ink
        match: \)

  commas:
    patterns:
      - name: punctuation.separator.ink
        match: \,

  expressionIdentifier:
    patterns:
      - match: >-
          (?x)
            (?:(?<=return) |
               (?<=&&) | (?<=\|\|) |
               (?<=\=) |
               (?<=/)  | (?<=%)    | (?<=\*) | (?<=\+) | (?<=\-) |
               (?<=\?) | (?<=!\?)  | (?<=\^) | (?<=\~) |
               (?<=,)  | (?=\)))
            (?:{{whitespace}})*
            ({{validIdentifier}}
            (?:\.{{validIdentifier}})?)
        captures:
          '1': { name: variable.other.ink }

      - match: >-
          (?x)
            (?:{{whitespace}})*
            (?:(?<=not) | (?<=and) | (?<=or) | (?<=has) | (?<=hasnt) | (?<=mod))
            {{anyNonIdentifierCharacter}}
            ({{validIdentifier}}
            (?:\.{{validIdentifier}})?)
        captures:
          '1': { name: variable.other.ink }

      - match: >-
          (?x)
            (?:{{whitespace}})*
            ({{validIdentifier}}
            (?:\.{{validIdentifier}})?)
            (?:{{whitespace}})*
            (?:(?=&&) | (?=\|\|) |
               (?=\=) | (?=!\=)  | (?=\>) | (?=\<) |
               (?=/)  | (?=%)    | (?=\*) | (?=\+) | (?=\-) |
               (?=\?) | (?=!\?)  | (?=\^) |
               (?=,)  | (?=\)))
        captures:
          '1': { name: variable.other.ink }

      - match: >-
          (?x)
            (?:{{whitespace}})*
            ({{validIdentifier}}
            (?:\.{{validIdentifier}})?)
            {{anyNonIdentifierCharacter}}
            (?:(?=not) | (?=and) | (?=or) | (?=has) | (?=hasnt) | (?=mod))
        captures:
          '1': { name: variable.other.ink }

  interpolatedIdentifier:
    patterns:
      - name: variable.other.ink
        match: '(?<=\{)(?<!^)(?:{{whitespace}})*{{validIdentifier}}(\.{{validIdentifier}})?(?:{{whitespace}})*(?!$)(?=\})'

  operator:
    patterns:
    - name: keyword.operator.logical.ink
      match: >-
        (?x)
          \~     |
          !(?!=) |
          &&     |
          \|\|
    - name: keyword.operator.assignment.ink
      match: >-
        (?x)
          =(?!=)
    - name: keyword.operator.assignment.augmented.ink
      match: >-
        (?x)
          %=  |
          &=  |
          \*= |
          \+= |
          \-= |
          /=
    - name: keyword.operator.relational.ink
      match: >-
        (?x)
          <=   |
          >=   |
          <    |
          >
    - name: keyword.operator.comparison.ink
      match: >-
        (?x)
          ==   |
          !=
    - name: keyword.operator.arithmetic.ink
      match: >-
        (?x)
          \-\- |
          \+\+ |
          /    |
          %    |
          \*   |
          \+   |
          (?<!$)(?:{{whitespace}})*-(?:{{whitespace}})*(?!=)
    - name: keyword.operator.membership.ink
      match: >-
        (?x)
          \?  |
          !\? |
          \^
    - name: keyword.operator.word.ink
      match: >-
        (?x)
          (?<={{anyNonIdentifierCharacter}})not   (?={{anyNonIdentifierCharacter}})   |
          (?<={{anyNonIdentifierCharacter}})and   (?={{anyNonIdentifierCharacter}})   |
          (?<={{anyNonIdentifierCharacter}})or    (?={{anyNonIdentifierCharacter}})   |
          (?<={{anyNonIdentifierCharacter}})has   (?={{anyNonIdentifierCharacter}})   |
          (?<={{anyNonIdentifierCharacter}})hasnt (?={{anyNonIdentifierCharacter}})   |
          (?<={{anyNonIdentifierCharacter}})mod   (?={{anyNonIdentifierCharacter}})
...
